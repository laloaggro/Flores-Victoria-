services:
  # Frontend en modo desarrollo
  frontend-dev:
    build:
      context: ../../frontend
      dockerfile: Dockerfile.dev
    container_name: flores-victoria-frontend-dev
    restart: unless-stopped
    ports:
      - "5173:5173"
    volumes:
      - ../../frontend:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - api-gateway

  # Panel de administraci√≥n en modo desarrollo
  admin-panel-dev:
    build:
      context: ../../admin-panel
      dockerfile: Dockerfile.dev
    container_name: flores-victoria-admin-panel-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
    volumes:
      - ../../admin-panel:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - api-gateway

  # API Gateway
  api-gateway:
    build: 
      context: ../../microservices/api-gateway
      dockerfile: Dockerfile
    container_name: flores-victoria-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ../../microservices/api-gateway:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      - mongodb
      - postgres
      - redis
      - rabbitmq

  # Bases de datos
  mongodb:
    image: mongo:4.4
    container_name: flores-victoria-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  postgres:
    image: postgres:13
    container_name: flores-victoria-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: floresvictoria
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:6.2-alpine
    container_name: flores-victoria-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    container_name: flores-victoria-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password

  product-service:
    build: 
      context: ../../microservices/product-service
      dockerfile: Dockerfile.dev
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=development
      - PORT=3009
      - PRODUCT_SERVICE_MONGODB_URI=mongodb://root:rootpassword@mongodb:27017/products_db?authSource=admin
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    volumes:
      - ../../microservices/product-service:/app
      - ../../shared:/shared
      - /app/node_modules
    depends_on:
      - mongodb
      - jaeger
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
  postgres_data:
  redis_data:
  rabbitmq_data: