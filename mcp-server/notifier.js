const axios = require('axios');

// Configuraci√≥n de webhooks (definir en variables de entorno)
const SLACK_WEBHOOK = process.env.SLACK_WEBHOOK_URL || '';
const DISCORD_WEBHOOK = process.env.DISCORD_WEBHOOK_URL || '';

/**
 * Enviar notificaci√≥n a Slack
 */
async function sendSlackNotification(message, severity = 'info') {
    if (!SLACK_WEBHOOK) {
        console.log('‚ö†Ô∏è Slack webhook no configurado');
        return;
    }

    const color = {
        'error': '#ef4444',
        'warning': '#fbbf24',
        'info': '#3b82f6',
        'success': '#4ade80'
    }[severity] || '#3b82f6';

    const payload = {
        attachments: [{
            color: color,
            title: `üå∫ Flores Victoria - ${severity.toUpperCase()}`,
            text: message,
            footer: 'MCP Server Notification',
            ts: Math.floor(Date.now() / 1000)
        }]
    };

    try {
        await axios.post(SLACK_WEBHOOK, payload);
        console.log('‚úì Notificaci√≥n Slack enviada');
    } catch (error) {
        console.error('‚úó Error al enviar notificaci√≥n Slack:', error.message);
    }
}

/**
 * Enviar notificaci√≥n a Discord
 */
async function sendDiscordNotification(message, severity = 'info') {
    if (!DISCORD_WEBHOOK) {
        console.log('‚ö†Ô∏è Discord webhook no configurado');
        return;
    }

    const color = {
        'error': 15548997,    // Rojo
        'warning': 16705372,  // Amarillo
        'info': 3901635,      // Azul
        'success': 5025616    // Verde
    }[severity] || 3901635;

    const emoji = {
        'error': 'üî¥',
        'warning': 'üü°',
        'info': 'üîµ',
        'success': 'üü¢'
    }[severity] || 'üîµ';

    const payload = {
        embeds: [{
            title: `${emoji} Flores Victoria - ${severity.toUpperCase()}`,
            description: message,
            color: color,
            footer: {
                text: 'MCP Server Notification'
            },
            timestamp: new Date().toISOString()
        }]
    };

    try {
        await axios.post(DISCORD_WEBHOOK, payload);
        console.log('‚úì Notificaci√≥n Discord enviada');
    } catch (error) {
        console.error('‚úó Error al enviar notificaci√≥n Discord:', error.message);
    }
}

/**
 * Notificar evento cr√≠tico (servicios ca√≠dos, errores graves)
 */
async function notifyCriticalEvent(serviceName, details) {
    const message = `‚ö†Ô∏è **ALERTA CR√çTICA**\n\n` +
        `Servicio: ${serviceName}\n` +
        `Detalles: ${details}\n` +
        `Timestamp: ${new Date().toLocaleString('es-ES')}`;

    await Promise.all([
        sendSlackNotification(message, 'error'),
        sendDiscordNotification(message, 'error')
    ]);
}

/**
 * Notificar despliegue exitoso
 */
async function notifyDeployment(version, environment) {
    const message = `üöÄ **DESPLIEGUE EXITOSO**\n\n` +
        `Versi√≥n: ${version}\n` +
        `Ambiente: ${environment}\n` +
        `Timestamp: ${new Date().toLocaleString('es-ES')}`;

    await Promise.all([
        sendSlackNotification(message, 'success'),
        sendDiscordNotification(message, 'success')
    ]);
}

/**
 * Notificar m√©tricas diarias
 */
async function notifyDailyMetrics(metrics) {
    const message = `üìä **REPORTE DIARIO**\n\n` +
        `Servicios Activos: ${metrics.healthyServices}/${metrics.totalServices}\n` +
        `Eventos Registrados: ${metrics.eventsCount}\n` +
        `Auditor√≠as: ${metrics.auditsCount}\n` +
        `Uptime: ${metrics.uptime}%\n` +
        `Tests: ${metrics.testsStatus}`;

    await Promise.all([
        sendSlackNotification(message, 'info'),
        sendDiscordNotification(message, 'info')
    ]);
}

/**
 * Notificar nuevo PR
 */
async function notifyPullRequest(prNumber, title, author) {
    const message = `üîî **NUEVO PULL REQUEST**\n\n` +
        `PR #${prNumber}: ${title}\n` +
        `Autor: ${author}\n` +
        `Acci√≥n requerida: Revisi√≥n de c√≥digo`;

    await Promise.all([
        sendSlackNotification(message, 'info'),
        sendDiscordNotification(message, 'info')
    ]);
}

/**
 * Notificar issue cr√≠tico
 */
async function notifyCriticalIssue(issueNumber, title, labels) {
    const message = `üö® **ISSUE CR√çTICO**\n\n` +
        `Issue #${issueNumber}: ${title}\n` +
        `Labels: ${labels.join(', ')}\n` +
        `Acci√≥n requerida: Atenci√≥n inmediata`;

    await Promise.all([
        sendSlackNotification(message, 'error'),
        sendDiscordNotification(message, 'error')
    ]);
}

module.exports = {
    sendSlackNotification,
    sendDiscordNotification,
    notifyCriticalEvent,
    notifyDeployment,
    notifyDailyMetrics,
    notifyPullRequest,
    notifyCriticalIssue
};
