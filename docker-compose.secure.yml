version: '3.8'

services:
  # Bases de datos
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-flores_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-flores_password}
      POSTGRES_DB: ${POSTGRES_DB:-flores_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-flores_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-strong_redis_password_here} --appendonly yes
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
    sysctls:
      - net.core.somaxconn=1024
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  mongodb:
    image: mongo:4.4
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-strong_mongo_password_here}
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-strong_rabbitmq_password_here}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Microservicios
  api-gateway:
    build: 
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    networks:
      - app-network
    depends_on:
      user-service:
        condition: service_healthy
    environment:
      - JWT_SECRET=${JWT_SECRET:-strong_jwt_secret_here}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  auth-service:
    build:
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - JWT_SECRET=${JWT_SECRET:-strong_jwt_secret_here}
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER:-flores_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-flores_password}
      - DB_NAME=${POSTGRES_DB:-flores_db}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER:-flores_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-flores_password}
      - DB_NAME=${POSTGRES_DB:-flores_db}
      - RABBITMQ_URL=amqp://${RABBITMQ_DEFAULT_USER:-admin}:${RABBITMQ_DEFAULT_PASS:-strong_rabbitmq_password_here}@rabbitmq:5672
      - JWT_SECRET=${JWT_SECRET:-strong_jwt_secret_here}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1001:1001"  # Usuario no root
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  product-service:
    build:
      context: ./microservices/product-service
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-strong_mongo_password_here}@mongodb:27017/flores_db?authSource=admin
      - PORT=3002
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1001:1001"  # Usuario no root
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  cart-service:
    build:
      context: ./microservices/cart-service
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-strong_redis_password_here}@redis:6379
      - PORT=3005
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1001:1001"  # Usuario no root
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  order-service:
    build:
      context: ./microservices/order-service
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER:-flores_user}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-flores_password}
      - DB_NAME=${POSTGRES_DB:-flores_db}
      - PORT=3004
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1001:1001"  # Usuario no root
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  wishlist-service:
    build:
      context: ./microservices/wishlist-service
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD:-strong_redis_password_here}@redis:6379
      - PORT=3006
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1001:1001"  # Usuario no root
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  review-service:
    build:
      context: ./microservices/review-service
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-strong_mongo_password_here}@mongodb:27017/flores_db?authSource=admin
      - PORT=3007
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1001:1001"  # Usuario no root
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  contact-service:
    build:
      context: ./microservices/contact-service
      dockerfile: Dockerfile
    networks:
      - app-network
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      - MONGO_URI=mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-strong_mongo_password_here}@mongodb:27017/flores_db?authSource=admin
      - PORT=3008
      - EMAIL_HOST=${EMAIL_HOST:-smtp.gmail.com}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    user: "1001:1001"  # Usuario no root
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Monitoreo
  prometheus:
    image: prom/prometheus:v2.37.0
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  grafana:
    image: grafana/grafana-enterprise
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3009:3000"
    networks:
      - monitoring-network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-strong_grafana_password_here}
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Exporters para monitoreo
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.10.0
    environment:
      DATA_SOURCE_NAME: postgresql://${POSTGRES_USER:-flores_user}:${POSTGRES_PASSWORD:-flores_password}@postgres:5432/${POSTGRES_DB:-flores_db}?sslmode=disable
    networks:
      - monitoring-network
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  redis-exporter:
    image: oliver006/redis_exporter:v1.43.0
    environment:
      REDIS_ADDR: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-strong_redis_password_here}
    networks:
      - monitoring-network
      - app-network
    depends_on:
      redis:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  mongodb-exporter:
    image: bitnami/mongodb-exporter:0.30.0
    environment:
      MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-strong_mongo_password_here}@mongodb:27017/admin?authSource=admin
    networks:
      - monitoring-network
      - app-network
    depends_on:
      mongodb:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5175:80"
    networks:
      - app-network
    depends_on:
      api-gateway:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge