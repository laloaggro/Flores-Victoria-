name: Weekly Project Report / Reporte Semanal del Proyecto

on:
  schedule:
    # Cada lunes a las 9:00 AM / Every Monday at 9:00 AM
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  generate-weekly-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Generate Weekly Report / Generar Reporte Semanal
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Fecha de hace 7 días / Date 7 days ago
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            const since = oneWeekAgo.toISOString();
            
            // Obtener commits de la última semana / Get commits from last week
            const { data: commits } = await github.rest.repos.listCommits({
              owner,
              repo,
              since,
              per_page: 100
            });
            
            // Obtener PRs de la última semana / Get PRs from last week
            const { data: prs } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'all',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });
            
            const recentPRs = prs.filter(pr => new Date(pr.updated_at) > oneWeekAgo);
            
            // Obtener issues de la última semana / Get issues from last week
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'all',
              since,
              per_page: 100
            });
            
            // Filtrar solo issues (no PRs) / Filter only issues (not PRs)
            const actualIssues = issues.filter(issue => !issue.pull_request);
            
            // Clasificar commits / Classify commits
            const commitStats = {
              feat: 0,
              fix: 0,
              docs: 0,
              refactor: 0,
              test: 0,
              chore: 0,
              other: 0
            };
            
            commits.forEach(commit => {
              const message = commit.commit.message.toLowerCase();
              if (message.startsWith('feat')) commitStats.feat++;
              else if (message.startsWith('fix')) commitStats.fix++;
              else if (message.startsWith('docs')) commitStats.docs++;
              else if (message.startsWith('refactor')) commitStats.refactor++;
              else if (message.startsWith('test')) commitStats.test++;
              else if (message.startsWith('chore')) commitStats.chore++;
              else commitStats.other++;
            });
            
            // Estadísticas de PRs / PR statistics
            const prStats = {
              opened: recentPRs.filter(pr => new Date(pr.created_at) > oneWeekAgo).length,
              closed: recentPRs.filter(pr => pr.state === 'closed' && new Date(pr.closed_at) > oneWeekAgo).length,
              merged: recentPRs.filter(pr => pr.merged_at && new Date(pr.merged_at) > oneWeekAgo).length,
              open: recentPRs.filter(pr => pr.state === 'open').length
            };
            
            // Estadísticas de issues / Issue statistics
            const issueStats = {
              opened: actualIssues.filter(issue => new Date(issue.created_at) > oneWeekAgo).length,
              closed: actualIssues.filter(issue => issue.state === 'closed' && new Date(issue.closed_at) > oneWeekAgo).length,
              open: actualIssues.filter(issue => issue.state === 'open').length
            };
            
            // Top contribuidores / Top contributors
            const contributors = {};
            commits.forEach(commit => {
              const author = commit.author?.login || commit.commit.author.name;
              contributors[author] = (contributors[author] || 0) + 1;
            });
            
            const topContributors = Object.entries(contributors)
              .sort((a, b) => b[1] - a[1])
              .slice(0, 5)
              .map(([name, count]) => `- ${name}: ${count} commits`)
              .join('\n');
            
            // Generar reporte / Generate report
            const reportDate = new Date().toLocaleDateString('es-ES', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            
            const report = `# 📊 Reporte Semanal - ${reportDate}
            
## 🌺 Flores Victoria - Resumen de la Semana

### 📈 Actividad General
- **Commits totales:** ${commits.length}
- **Pull Requests abiertos:** ${prStats.opened}
- **Pull Requests fusionados:** ${prStats.merged}
- **Issues abiertos:** ${issueStats.opened}
- **Issues cerrados:** ${issueStats.closed}

### 💻 Distribución de Commits

| Tipo | Cantidad |
|------|----------|
| ✨ Features (feat) | ${commitStats.feat} |
| 🐛 Fixes (fix) | ${commitStats.fix} |
| 📝 Documentación (docs) | ${commitStats.docs} |
| ♻️ Refactor | ${commitStats.refactor} |
| 🧪 Tests | ${commitStats.test} |
| 🔧 Chores | ${commitStats.chore} |
| 📦 Otros | ${commitStats.other} |

### 🔄 Pull Requests

- **Abiertos esta semana:** ${prStats.opened}
- **Cerrados esta semana:** ${prStats.closed}
- **Fusionados esta semana:** ${prStats.merged}
- **Pendientes de revisión:** ${prStats.open}

### 🐛 Issues

- **Nuevos esta semana:** ${issueStats.opened}
- **Resueltos esta semana:** ${issueStats.closed}
- **Actualmente abiertos:** ${issueStats.open}

### 🏆 Top Contribuidores

${topContributors || '- Sin contribuciones esta semana'}

### 🎯 Próximos Objetivos

- Mantener cobertura de tests al 100%
- Continuar con mejoras de MCP
- Documentación de APIs
- Optimización de servicios

---

*Generado automáticamente por GitHub Actions*
*Fecha: ${reportDate}*
`;

            // Crear issue con el reporte / Create issue with the report
            await github.rest.issues.create({
              owner,
              repo,
              title: `📊 Reporte Semanal - ${reportDate}`,
              body: report,
              labels: ['report', 'weekly', 'documentation']
            });
            
            console.log('✓ Reporte semanal generado exitosamente');
            
            // Registrar en MCP Server / Register in MCP Server
            try {
              const axios = require('axios');
              await axios.post('http://localhost:5050/events', {
                type: 'weekly-report-generated',
                payload: {
                  date: reportDate,
                  commits: commits.length,
                  prs: prStats.merged,
                  issues: issueStats.closed
                }
              });
            } catch (error) {
              console.log('⚠️ No se pudo registrar en MCP Server (opcional)');
            }
