name: CD

on:
  push:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: floresvictoria/app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push images
      run: |
        # Build and push images for all microservices
        for dir in microservices/*/; do
          if [ -f "$dir/Dockerfile" ]; then
            service_name=$(basename $dir)
            echo "Building and pushing $service_name"
            docker build -t floresvictoria/$service_name:${{ github.sha }} -t floresvictoria/$service_name:latest $dir
            docker push floresvictoria/$service_name:${{ github.sha }}
            docker push floresvictoria/$service_name:latest
          fi
        done
        # Build and push frontend image
        docker build -t floresvictoria/frontend:${{ github.sha }} -t floresvictoria/frontend:latest frontend
        docker push floresvictoria/frontend:${{ github.sha }}
        docker push floresvictoria/frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Deploy to Kubernetes
      run: |
        echo "Deploying to Kubernetes cluster"
        # In a real scenario, you would:
        # 1. Set up kubectl with your cluster credentials
        # 2. Update image tags in your Kubernetes manifests
        # 3. Apply the updated manifests
        # For example:
        # kubectl set image deployment/api-gateway api-gateway=floresvictoria/api-gateway:${{ github.sha }} -n flores-victoria
        # kubectl set image deployment/auth-service auth-service=floresvictoria/auth-service:${{ github.sha }} -n flores-victoria
        # ... and so on for each service
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}