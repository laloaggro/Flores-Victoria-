name: Auto Label Issues

on:
  issues:
    types: [opened, edited]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Auto label based on content
        uses: actions/github-script@v6
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = issue.body ? issue.body.toLowerCase() : '';
            const labels = [];

            // Detectar tipo de issue / Detect issue type
            if (title.includes('bug') || body.includes('error') || body.includes('fallo')) {
              labels.push('bug');
            }
            if (title.includes('feature') || title.includes('feat') || body.includes('nueva funcionalidad')) {
              labels.push('enhancement');
            }
            if (title.includes('doc') || body.includes('documentaciÃ³n')) {
              labels.push('documentation');
            }
            if (title.includes('test') || body.includes('prueba')) {
              labels.push('testing');
            }
            if (title.includes('security') || body.includes('seguridad') || body.includes('vulnerabilidad')) {
              labels.push('security');
            }

            // Detectar prioridad / Detect priority
            if (title.includes('urgent') || title.includes('critical') || title.includes('urgente')) {
              labels.push('high-priority');
            }
            if (title.includes('low priority') || title.includes('baja prioridad')) {
              labels.push('low-priority');
            }

            // Detectar microservicio / Detect microservice
            const services = ['api-gateway', 'auth-service', 'product-service', 'user-service', 
                             'order-service', 'cart-service', 'wishlist-service', 'review-service', 
                             'contact-service'];
            for (const service of services) {
              if (title.includes(service) || body.includes(service)) {
                labels.push(`service:${service}`);
              }
            }

            // Aplicar labels / Apply labels
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: labels
              });
            }

      - name: Registrar en MCP server
        run: |
          curl -X POST http://localhost:5050/events \
            -H 'Content-Type: application/json' \
            -d '{
              "type": "issue-labeled",
              "payload": {
                "number": ${{ github.event.issue.number }},
                "title": "${{ github.event.issue.title }}",
                "labels": ${{ toJSON(github.event.issue.labels) }}
              }
            }' || echo "MCP server not available"
