name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies for all services
      run: |
        cd development/microservices/auth-service
        npm ci
        cd ../product-service
        npm ci
        cd ../user-service
        npm ci
        cd ../order-service
        npm ci
        cd ../cart-service
        npm ci
        cd ../wishlist-service
        npm ci
        cd ../review-service
        npm ci
        cd ../contact-service
        npm ci
        
    - name: Run unit tests for all services
      run: |
        cd development/microservices/auth-service
        npm run test
        cd ../product-service
        npm run test
        cd ../user-service
        npm run test
        cd ../order-service
        npm run test
        cd ../cart-service
        npm run test
        cd ../wishlist-service
        npm run test
        cd ../review-service
        npm run test
        cd ../contact-service
        npm run test
        
    - name: Run integration tests for all services
      run: |
        cd development/microservices/auth-service
        npm run test:integration
        cd ../product-service
        npm run test:integration
        cd ../user-service
        npm run test:integration
        cd ../order-service
        npm run test:integration
        cd ../cart-service
        npm run test:integration
        cd ../wishlist-service
        npm run test:integration
        cd ../review-service
        npm run test:integration
        cd ../contact-service
        npm run test:integration

    - name: Run E2E tests
      run: |
        cd development/microservices/product-service
        npm run test:e2e

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push product service
      uses: docker/build-push-action@v4
      with:
        context: development/microservices/product-service
        push: false
        tags: floresvictoria/product-service:latest
        
    - name: Build and push auth service
      uses: docker/build-push-action@v4
      with:
        context: development/microservices/auth-service
        push: false
        tags: floresvictoria/auth-service:latest
        
    - name: Build and push user service
      uses: docker/build-push-action@v4
      with:
        context: development/microservices/user-service
        push: false
        tags: floresvictoria/user-service:latest
        
    - name: Build and push order service
      uses: docker/build-push-action@v4
      with:
        context: development/microservices/order-service
        push: false
        tags: floresvictoria/order-service:latest
        
    - name: Build and push cart service
      uses: docker/build-push-action@v4
      with:
        context: development/microservices/cart-service
        push: false
        tags: floresvictoria/cart-service:latest
        
    - name: Build and push wishlist service
      uses: docker/build-push-action@v4
      with:
        context: development/microservices/wishlist-service
        push: false
        tags: floresvictoria/wishlist-service:latest
        
    - name: Build and push review service
      uses: docker/build-push-action@v4
      with:
        context: development/microservices/review-service
        push: false
        tags: floresvictoria/review-service:latest
        
    - name: Build and push contact service
      uses: docker/build-push-action@v4
      with:
        context: development/microservices/contact-service
        push: false
        tags: floresvictoria/contact-service:latest

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment"
        # Aquí irían los comandos para desplegar en el entorno de staging
        
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment"
        # Aquí irían los comandos para desplegar en el entorno de producción