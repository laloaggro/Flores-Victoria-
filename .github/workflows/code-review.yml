name: Automated Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (if configured)
        run: |
          if [ -f .eslintrc.js ] || [ -f .eslintrc.json ]; then
            npm run lint || echo "⚠️ Linting encontró problemas"
          else
            echo "ℹ️ ESLint no configurado aún"
          fi
        continue-on-error: true

      - name: Analyze code quality
        uses: actions/github-script@v6
        with:
          script: |
            const pr = context.payload.pull_request;
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const issues = [];
            const recommendations = [];

            for (const file of files.data) {
              // Detectar archivos grandes / Detect large files
              if (file.additions > 500) {
                issues.push(`⚠️ \`${file.filename}\` tiene ${file.additions} líneas añadidas. Considera dividir en archivos más pequeños.`);
              }

              // Detectar archivos sensibles / Detect sensitive files
              if (file.filename.includes('.env') && !file.filename.includes('.example')) {
                issues.push(`🚨 \`${file.filename}\` parece contener variables de entorno. No debe estar en el repositorio.`);
              }

              // Detectar falta de tests / Detect missing tests
              if (file.filename.includes('src/') && !file.filename.includes('.test.') && file.additions > 50) {
                recommendations.push(`💡 \`${file.filename}\` es un archivo grande sin tests asociados. Considera agregar tests.`);
              }

              // Detectar console.log / Detect console.log
              if (file.patch && file.patch.includes('console.log')) {
                recommendations.push(`🔍 \`${file.filename}\` contiene \`console.log\`. Considera usar un logger apropiado.`);
              }
            }

            // Crear comentario con análisis / Create comment with analysis
            let comment = '## 🤖 Análisis Automático de Código / Automated Code Review\n\n';
            
            if (issues.length > 0) {
              comment += '### ⚠️ Issues Detectados / Issues Detected\n\n';
              comment += issues.map(i => `- ${i}`).join('\n') + '\n\n';
            }

            if (recommendations.length > 0) {
              comment += '### 💡 Recomendaciones / Recommendations\n\n';
              comment += recommendations.map(r => `- ${r}`).join('\n') + '\n\n';
            }

            if (issues.length === 0 && recommendations.length === 0) {
              comment += '✅ No se detectaron issues. ¡Buen trabajo!\n\n';
              comment += '✅ No issues detected. Good job!\n';
            }

            comment += '\n---\n*Este análisis es automático y puede tener falsos positivos.*\n';
            comment += '*This analysis is automated and may have false positives.*';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: comment
            });

      - name: Registrar en MCP server
        run: |
          curl -X POST http://localhost:5050/events \
            -H 'Content-Type: application/json' \
            -d '{
              "type": "pr-reviewed",
              "payload": {
                "pr_number": ${{ github.event.pull_request.number }},
                "title": "${{ github.event.pull_request.title }}",
                "author": "${{ github.event.pull_request.user.login }}"
              }
            }' || echo "MCP server not available"
