name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Start MCP server
      run: |
        cd mcp-server
        npm install
        nohup npm start &
      shell: bash

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        npm install -g k6

    - name: Install microservices dependencies
      run: |
        ./scripts/install-microservices-deps.sh

    - name: Run unit tests
      run: |
        npm run test:unit

    - name: Registrar auditoría en MCP (tests)
      run: |
        curl -X POST http://localhost:5050/audit \
          -H 'Content-Type: application/json' \
          -d '{"action": "unit-tests", "agent": "github-actions", "details": "Unit tests executed"}'

    - name: Run integration tests  
      run: |
        npm run test:integration --passWithNoTests || echo "⚠️ No integration tests found or tests failed"
      continue-on-error: true

    - name: Registrar auditoría en MCP (integration)
      run: |
        curl -X POST http://localhost:5050/audit \
          -H 'Content-Type: application/json' \
          -d '{"action": "integration-tests", "agent": "github-actions", "details": "Integration tests executed"}'

    - name: Run load tests
      run: |
        if [ -f ./scripts/run-load-tests.sh ]; then
          ./scripts/run-load-tests.sh || echo "⚠️ Load tests failed"
        else
          echo "⚠️ Load tests script not found, skipping"
        fi
      continue-on-error: true

    - name: Limpiar contexto MCP
      run: |
        curl -X POST http://localhost:5050/clear

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Docker images
      run: |
        docker compose -f docker-compose.yml build

    - name: Push to registry (only on main branch)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Images would be pushed to registry here"
        echo "This is a simulation - in a real scenario, you would:"
        echo "1. Login to your container registry"
        echo "2. Tag images appropriately"
        echo "3. Push images to the registry"

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        echo "In a real scenario, you would:"
        echo "1. Connect to your staging environment"
        echo "2. Update services with new images"
        echo "3. Run health checks"

    - name: Deploy to production (manual)
      run: |
        echo "Deployment to production requires manual approval"
        echo "In a real scenario, you would:"
        echo "1. Wait for manual approval"
        echo "2. Connect to your production environment"
        echo "3. Update services with new images"
        echo "4. Run health checks"