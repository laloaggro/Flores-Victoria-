services:
  # Bases de datos
  mongodb:
    image: mongo:4.4
    container_name: flores-victoria-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - "27018:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  postgres:
    image: postgres:13
    container_name: flores-victoria-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: flores_user
      POSTGRES_PASSWORD: flores_password
      POSTGRES_DB: flores_db
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flores_user -d flores_db"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  redis:
    image: redis:6-alpine
    container_name: flores-victoria-redis
    restart: unless-stopped
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 20s

  # Servicio de mensajería
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: flores-victoria-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=adminpassword
    networks:
      - app-network
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 60s

  # Jaeger - Sistema de tracing distribuido
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: flores-victoria-jaeger
    restart: unless-stopped
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    networks:
      - app-network
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    healthcheck:
      test: ["CMD", "wget", "--spider", "localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Microservicios
  auth-service:
    build: 
      context: ./microservices/auth-service
      dockerfile: Dockerfile
    container_name: flores-victoria-auth-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - AUTH_SERVICE_PORT=3001
      - NODE_ENV=production
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - postgres
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3001 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  product-service:
    build: 
      context: ./microservices/product-service
      dockerfile: Dockerfile
    container_name: flores-victoria-product-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - PRODUCT_SERVICE_PORT=3002
      - NODE_ENV=production
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - mongodb
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3002 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  user-service:
    build: ./microservices/user-service
    container_name: flores-victoria-user-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - USER_SERVICE_PORT=3003
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=flores_db
      - DB_USER=flores_user
      - DB_PASSWORD=flores_password
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - postgres
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3003 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  order-service:
    build: ./microservices/order-service
    container_name: flores-victoria-order-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - ORDER_SERVICE_PORT=3004
      - NODE_ENV=production
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3004 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  cart-service:
    build: ./microservices/cart-service
    container_name: flores-victoria-cart-service
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      - CART_SERVICE_PORT=3005
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - redis
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3005 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  wishlist-service:
    build: ./microservices/wishlist-service
    container_name: flores-victoria-wishlist-service
    restart: unless-stopped
    ports:
      - "3006:3006"
    environment:
      - WISHLIST_SERVICE_PORT=3006
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - redis
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3006 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  review-service:
    build: ./microservices/review-service
    container_name: flores-victoria-review-service
    restart: unless-stopped
    ports:
      - "3007:3007"
    environment:
      - REVIEW_SERVICE_PORT=3007
      - NODE_ENV=production
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3007 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  contact-service:
    build: ./microservices/contact-service
    container_name: flores-victoria-contact-service
    restart: unless-stopped
    ports:
      - "3008:3008"
    environment:
      - CONTACT_SERVICE_PORT=3008
      - NODE_ENV=production
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_SECURE=false
      - EMAIL_USER=tu_email@gmail.com
      - EMAIL_PASS=tu_contraseña_de_aplicacion
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3008 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  api-gateway:
    build: ./microservices/api-gateway
    container_name: flores-victoria-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - API_GATEWAY_PORT=3000
      - NODE_ENV=production
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - USER_SERVICE_URL=http://user-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - CART_SERVICE_URL=http://cart-service:3005
      - WISHLIST_SERVICE_URL=http://wishlist-service:3006
      - REVIEW_SERVICE_URL=http://review-service:3007
      - CONTACT_SERVICE_URL=http://contact-service:3008
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6832
    networks:
      - app-network
    depends_on:
      - auth-service
      - product-service
      - user-service
      - order-service
      - cart-service
      - wishlist-service
      - review-service
      - contact-service
      - jaeger
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3000 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 60s

  # Frontend
  frontend:
    build: ./frontend
    container_name: flores-victoria-frontend
    restart: unless-stopped
    ports:
      - "5175:5175"
    networks:
      - app-network
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 5175 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

  # Panel de administración
  admin-panel:
    build: ./admin-panel
    container_name: flores-victoria-admin-panel
    restart: unless-stopped
    ports:
      - "3010:3010"
    networks:
      - app-network
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'GET /health HTTP/1.1\r\nHost: localhost\r\n\r\n' | nc localhost 3010 | grep -q '200 OK' || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 40s

networks:
  app-network:
    driver: bridge

volumes:
  mongodb-data:
  postgres-data:
  redis-data:
  rabbitmq-data:
  auth-db-data:
