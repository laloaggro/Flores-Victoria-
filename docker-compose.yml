version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:80"
    depends_on:
      - backend
    networks:
      - app-network

  # Backend service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/floresvictoria?authSource=admin
      - JWT_SECRET=secreto_super_seguro_para_flores_victoria
      - FRONTEND_URL=http://localhost:5173
    depends_on:
      - mongodb
    networks:
      - app-network

  # MongoDB service
  mongodb:
    image: mongo:5.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: floresvictoria
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  # Microservices
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    container_name: flores-victoria_api-gateway_1
    ports:
      - "3000:3000"
    volumes:
      - ./microservices/api-gateway:/app
      - /app/node_modules
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - USER_SERVICE_URL=http://user-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - CART_SERVICE_URL=http://cart-service:3005
      - WISHLIST_SERVICE_URL=http://wishlist-service:3006
      - REVIEW_SERVICE_URL=http://review-service:3007
      - CONTACT_SERVICE_URL=http://contact-service:4007
    depends_on:
      - mongodb
      - auth-service
      - product-service
      - user-service
      - order-service
      - cart-service
      - wishlist-service
      - review-service
      - contact-service

  # Auth Service
  auth-service:
    build: ./microservices/auth-service
    container_name: flores-victoria_auth-service_1
    ports:
      - "3001:3001"
    volumes:
      - ./microservices/auth-service:/app
      - /app/node_modules
    networks:
      - app-network
    environment:
      - NODE_ENV=development

  # Product Service
  product-service:
    build: ./microservices/product-service
    container_name: flores-victoria_product-service_1
    ports:
      - "3002:3002"
    volumes:
      - ./microservices/product-service:/app
      - /app/node_modules
    depends_on:
      - mongodb
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/floresvictoria?authSource=admin

  # User Service
  user-service:
    build: ./microservices/user-service
    container_name: flores-victoria_user-service_1
    ports:
      - "3003:3003"
    volumes:
      - ./microservices/user-service:/app
      - /app/node_modules
    depends_on:
      - mongodb
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/floresvictoria?authSource=admin

  # Order Service
  order-service:
    build: ./microservices/order-service
    container_name: flores-victoria_order-service_1
    ports:
      - "3004:3004"
    volumes:
      - ./microservices/order-service:/app
      - /app/node_modules
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - app-network
    environment:
      - NODE_ENV=development

  # Cart Service
  cart-service:
    build: ./microservices/cart-service
    container_name: flores-victoria_cart-service_1
    ports:
      - "3005:3005"
    volumes:
      - ./microservices/cart-service:/app
      - /app/node_modules
    depends_on:
      - redis
    networks:
      - app-network
    environment:
      - NODE_ENV=development

  # Wishlist Service
  wishlist-service:
    build: ./microservices/wishlist-service
    container_name: flores-victoria_wishlist-service_1
    ports:
      - "3006:3006"
    volumes:
      - ./microservices/wishlist-service:/app
      - /app/node_modules
    depends_on:
      - redis
    networks:
      - app-network
    environment:
      - NODE_ENV=development

  # Review Service
  review-service:
    build: ./microservices/review-service
    container_name: flores-victoria_review-service_1
    ports:
      - "3007:3007"
    volumes:
      - ./microservices/review-service:/app
      - /app/node_modules
    depends_on:
      - mongodb
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/floresvictoria?authSource=admin

  # Contact Service
  contact-service:
    build:
      context: ./microservices/contact-service
      dockerfile: Dockerfile
    container_name: flores-victoria_contact-service_1
    ports:
      - "4007:4007"
    environment:
      - EMAIL_HOST=smtp.example.com
      - EMAIL_PORT=587
      - EMAIL_USER=info@arreglosvictoria.cl
      - EMAIL_PASS=password
    networks:
      - app-network

  # Databases
  postgres:
    image: postgres:14
    container_name: postgres
    restart: unless-stopped
    ports:
      - "5433:5432"  # Cambiar el puerto host a 5433
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: floresvictoria
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  # Backend API (monolito)
  backend:
    build: ./backend
    container_name: flores-victoria_backend_1
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://admin:password@mongodb:27017/floresvictoria?authSource=admin

  # Frontend
  frontend:
    build: ./frontend
    container_name: flores-victoria_frontend_1
    ports:
      - "5174:5173"  # Cambiar el puerto host a 5174
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    environment:
      - NODE_ENV=development

  # Admin Panel
  admin-panel:
    build: ./admin-panel
    container_name: flores-victoria_admin-panel_1
    ports:
      - "3001:3001"
    volumes:
      - ./admin-panel:/app
      - /app/node_modules
    networks:
      - app-network
    environment:
      - NODE_ENV=development

  # API Gateway
  api-gateway:
    build: ./microservices/api-gateway
    container_name: flores-victoria_api-gateway_1
    ports:
      - "3000:3000"
    volumes:
      - ./microservices/api-gateway:/app
      - /app/node_modules
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_URL=http://auth-service:3001
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - USER_SERVICE_URL=http://user-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - CART_SERVICE_URL=http://cart-service:3005
      - WISHLIST_SERVICE_URL=http://wishlist-service:3006
      - REVIEW_SERVICE_URL=http://review-service:3007
      - CONTACT_SERVICE_URL=http://contact-service:4007
    depends_on:
      - mongodb
      - auth-service
      - product-service
      - user-service
      - order-service
      - cart-service
      - wishlist-service
      - review-service
      - contact-service

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # Puerto para conexiones AMQP
      - "15672:15672" # Puerto para la interfaz web de administración
      - "15692:15692" # Puerto para métricas de Prometheus
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: adminpassword
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '-rabbitmq_prometheus_enabled true'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  rabbitmq_data:

networks:
  app-network:
    driver: bridge