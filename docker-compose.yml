version: '3.8'

services:
  # Bases de datos
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-flores_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-flores_password}
      POSTGRES_DB: ${POSTGRES_DB:-flores_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network

  mongodb:
    image: mongo:5.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27018:27017"
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # Puerto para conexiones AMQP
      - "15672:15672" # Puerto para la interfaz web de administración
      - "15692:15692" # Puerto para métricas de Prometheus
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: adminpassword
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: '-rabbitmq_prometheus_enabled true'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  # Exportadores de métricas
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://flores_user:flores_password@postgres:5432/flores_db?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - app-network
    depends_on:
      - postgres

  redis-exporter:
    image: oliver006/redis_exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
    ports:
      - "9121:9121"
    networks:
      - app-network
    depends_on:
      - redis

  mongodb-exporter:
    image: percona/mongodb_exporter:0.20
    command: "--mongodb.uri=mongodb://root:rootpassword@mongodb:27017/admin"
    ports:
      - "9216:9216"
    networks:
      - app-network
    depends_on:
      - mongodb

  # Microservicios
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:3000"
    environment:
      - USER_SERVICE_URL=http://user-service:3003
      - PRODUCT_SERVICE_URL=http://product-service:3002
      - ORDER_SERVICE_URL=http://order-service:3004
      - CART_SERVICE_URL=http://cart-service:3005
      - WISHLIST_SERVICE_URL=http://wishlist-service:3006
      - REVIEW_SERVICE_URL=http://review-service:3007
      - CONTACT_SERVICE_URL=http://contact-service:3008
    depends_on:
      - user-service
      - product-service
      - order-service
      - cart-service
      - wishlist-service
      - review-service
      - contact-service
    networks:
      - app-network

  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    ports:
      - "4001:3003"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/users
      - JWT_SECRET=secreto_super_seguro_para_flores_victoria
    depends_on:
      - postgres
    networks:
      - app-network

  product-service:
    build:
      context: ./microservices/product-service
      dockerfile: Dockerfile
    ports:
      - "4002:3002"
    environment:
      - PORT=3002
      - MONGODB_URI=mongodb://root:rootpassword@mongodb:27017/floresvictoria?authSource=admin
    depends_on:
      - mongodb
    networks:
      - app-network

  order-service:
    build:
      context: ./microservices/order-service
      dockerfile: Dockerfile
    ports:
      - "4003:3004"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/orders
    depends_on:
      - postgres
    networks:
      - app-network

  cart-service:
    build:
      context: ./microservices/cart-service
      dockerfile: Dockerfile
    ports:
      - "4004:3005"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - app-network

  wishlist-service:
    build:
      context: ./microservices/wishlist-service
      dockerfile: Dockerfile
    ports:
      - "4005:3006"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/wishlist
    depends_on:
      - postgres
    networks:
      - app-network

  review-service:
    build:
      context: ./microservices/review-service
      dockerfile: Dockerfile
    ports:
      - "4006:3007"
    environment:
      - REVIEW_SERVICE_MONGODB_URI=mongodb://root:rootpassword@mongodb:27017/reviews?authSource=admin
    depends_on:
      - mongodb
    networks:
      - app-network
    volumes:
      - ./microservices/shared:/shared

  contact-service:
    build:
      context: ./microservices/contact-service
      dockerfile: Dockerfile
    ports:
      - "4007:3008"
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/contact
    depends_on:
      - postgres
    networks:
      - app-network

  # Monitoreo
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./microservices/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3009:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=321432ewqQ
    volumes:
      - grafana_data:/var/lib/grafana
      - ./microservices/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  app-network:
    driver: bridge
